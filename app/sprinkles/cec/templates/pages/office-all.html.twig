{% extends "pages/abstract/default.html.twig" %}
{% set page_active = "search" %}

{# Overrides blocks in head of base template #}
{% block page_title %}{{ translate("Offices") }}{% endblock %}


{% block body_matter %}
    <div class="row">

        {% if office %}

            <div class="spacing"></div>

            {% for off in office %}
                <div class="col-xs-12 col-sm-6 col-md-4 col-lg-3">
                    <div class="single">
                        {% if off.brand == "Midwest" %}
                            <img src="{{ midwestLogo }}" alt="">
                        {% elseif off.brand == "Mondovi" %}
                            <img src="{{ mondoviLogo }}" alt="">
                        {% elseif off.brand == "Mountain" %}
                            <img src="{{ mountainLogo }}" alt="">
                        {% elseif off.brand == "Merit" %}
                            <img src="{{ meritLogo }}" alt="">
                        {% endif %}

                        {#<p>{{ off.city }}, {{ off.state }}</p>#}
                        <p>{{ off.name }}</p>

                        {#<p class="zip">{{ page.ziplat }}, {{ page.ziplng }}</p>#}

                        <a href="{{ site.uri.public }}/offices/o/{{ off.vanity_url }}" class="btn btn-orange-round">
                            View Office Information
                        </a>
                    </div>
                </div>
            {% endfor %}
        {% else %}
            <div class="col-xs-12">
                <p>Please try your search again.</p>
            </div>
        {% endif %}

        {{ page.lookupfound }}


    </div>
{% endblock %}


{% block scripts_page %}
    <!-- Include page-specific variables -->
    <script>
        {% include "pages/partials/page.js.twig" %}
        {% include "pages/partials/key.js.twig" %}

        var key = api.key;

        //zip code
        Array.prototype.sortOn = function (key) {
            this.sort(function (a, b) {
                if (a[key] < b[key]) {
                    return -1;
                } else if (a[key] > b[key]) {
                    return 1;
                }
                return 0;
            });
        };

        // magic.js

        // process the form
        $.ajax({
            type: 'POST', // define the type of HTTP verb we want to use (POST for our form)
            url: 'https://www.googleapis.com/geolocation/v1/geolocate?key=' + key, // the url where we want to POST
            dataType: 'json', // what type of data do we expect back from the server
            encode: true
        })
        // using the done promise callback
            .done(function (data) {

                // log data to the console so we can see
                console.log(JSON.stringify(data));
                var JSONObject = JSON.parse(JSON.stringify(data));
                lat = page.ziplat;
                lng = page.ziplng;
                var locs = page.locations;


                console.log(locs);

                for (i = 0; i < locs.length; i++) {
                    unit = "K";
                    var radlat1 = Math.PI * lat / 180;
                    var radlat2 = Math.PI * locs[i]['latitude'] / 180;
                    var radlon1 = Math.PI * lng / 180;
                    var radlon2 = Math.PI * locs[i]['longitude'] / 180;
                    var theta = lng - locs[i]['longitude'];
                    var radtheta = Math.PI * theta / 180;
                    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);
                    dist = Math.acos(dist);
                    dist = dist * 180 / Math.PI;
                    dist = dist * 60 * 1.1515;
                    if (unit == "K") {
                        dist = dist * 1.609344
                    }
                    if (unit == "N") {
                        dist = dist * 0.8684
                    }
                    locs[i]['distance'] = Math.floor(dist);
                }


                locs.sort(function (a, b) {
                    var valueA, valueB;

                    valueA = a['distance']; // Where 1 is your index, from your example
                    valueB = b['distance'];
                    if (valueA < valueB) {
                        return -1;
                    } else if (valueA > valueB) {
                        return 1;
                    }
                    return 0;
                });


                if (page.ziplat && page.ziplng) {
                    $(document).ready(function () {
                        for (i = 0; i < 5; i++) {
                            page = $.extend(
                                true,               // deep extend
                                {
                                    "office": locs[i]
                                },
                                page);

                            console.log(locs[i]);
                            $('.zip').show().text(locs[i]['distance'] + " miles away");
                        }
                    });
                }
            });
    </script>
{% endblock %}
